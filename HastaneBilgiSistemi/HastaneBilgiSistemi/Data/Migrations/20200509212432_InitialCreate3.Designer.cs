// <auto-generated />
using System;
using HastaneBilgiSistemi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HastaneBilgiSistemi.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200509212432_InitialCreate3")]
    partial class InitialCreate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "07551023-cdfc-40b2-98b3-d3cda1250829",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5992814b-3867-44b5-9f0c-34790c1c2a8b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "47f37478-e5d9-405c-bd82-88331080b470",
                            Name = "Secretary",
                            NormalizedName = "SECRETARY"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "753f8c2b-411f-47f2-b4a9-c5976f418f66",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1955, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c6cfacc1-ea7b-41cd-8621-122911645043",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            FullName = "Admin Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcugf4xToJ1MKhSTjgBRII0siWJx3Z0bmRxzqTVh1MRfLzMdDTpgFnLfhwX5mY15w==",
                            PhoneNumber = "5325321234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8717e69-a0d0-49c0-bcf0-8c3e79d2278d",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1955, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5e6ee46f-56cf-404b-be55-85cea8d4beac",
                            Email = "doctor@doctor.com",
                            EmailConfirmed = true,
                            FirstName = "Rıfat",
                            FullName = "Rıfat Yaşar",
                            LastName = "Yaşar",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@DOCTOR.COM",
                            NormalizedUserName = "doctor@doctor.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYUax3eGL5Yc+rQkg9FpbS3BxyztNzWQLk4ThJXQCbhxIaLeEAMf58Kjekq0gne7w==",
                            PhoneNumber = "5325321234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e7385ea-7495-4719-8bd5-6e98585481fa",
                            TwoFactorEnabled = false,
                            UserName = "doctor@doctor.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1955, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d405dcec-b5ef-43dd-877a-07821b98f423",
                            Email = "secretary@secretary.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            FullName = "Ayşe Gül",
                            LastName = "Gül",
                            LockoutEnabled = false,
                            NormalizedEmail = "SECRETARY@SECRETARY.COM",
                            NormalizedUserName = "secretary@secretary.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDohhaIMkRWu9f/01f9h2a6CmqSvsh+z9K/N/6UNJuYIP1uesHPtNN9hHehjQqmog==",
                            PhoneNumber = "5325321234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e2f0c73-34d9-4174-97ba-a8bcf2d7d8e0",
                            TwoFactorEnabled = false,
                            UserName = "secretary@secretary.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1955, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9dca12d6-078b-4eb1-8765-453bf4c6dc76",
                            Email = "client@client.com",
                            EmailConfirmed = true,
                            FirstName = "Osman",
                            FullName = "Osman Oduncu",
                            LastName = "Oduncu",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@CLIENT.COM",
                            NormalizedUserName = "client@client.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBk7tdfMD4ghnqM6iYBrmIYehml8NKFWGa8723/RDmHJJzZs4f/EFXcx9WRjTmmarA==",
                            PhoneNumber = "5325321234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b161bf1d-9494-4bf1-a2a6-b850871439c7",
                            TwoFactorEnabled = false,
                            UserName = "client@client.com"
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ClientHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseasId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseasId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ClientHistory");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ClientHistoryMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientHistoryId");

                    b.HasIndex("MedicationId");

                    b.ToTable("ClientHistoryMedication");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Diseas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Diseas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "COVID-19"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hipertansiyon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hiperlipidemi "
                        },
                        new
                        {
                            Id = 4,
                            Name = "Akut Romatizmal Ateş"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Multiple Skleroz"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Üst Solunum Yolu Enfeksiyonu"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Alt Solunum Yolu Enfeksiyonu"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Akut Gastroenterit"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Yumuşak Doku Enfeksiyonu "
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolyclinicId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PolyclinicId = 9,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Medication");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AZOSİLİN 30 TB"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BACTRİM 200/40 MG 100 ML SÜSPANSİYON"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DUOCİD ORAL SÜSPANSİYON 250MG/5ML 100ML"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DEPOSİLİN 1.2 IU FLK"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MACROL 250 MG 100 ML SUSPANSIYON"
                        },
                        new
                        {
                            Id = 6,
                            Name = "NİDAZOL 500 MG FİLM TABLET"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SUPRAX SUSPANSIYON 50 ML."
                        },
                        new
                        {
                            Id = 8,
                            Name = "SUPRAX 400 MG"
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Polyclinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Polyclinic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ağız ve Diş Sağlığı Servisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anestezi ve Reanimasyon Servisi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beslenme ve Diyet Bölümü"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cilt Hastalıkları Servisi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Çocuk Servisi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dahiliye Servisi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fizik Tedavi Servisi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Genel Cerrahi Servisi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Göğüs Hastalıkları Servisi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Göz Servisi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Kadın Hastalıkları ve Doğum Servisi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kardiyoloji Servisi"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Kulak Burun Boğaz Servisi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nöroloji Servisi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Nöroşirüji Servisi"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Ortopedi ve Travmatoloji Servisi"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Patoloji Servisi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Psikoloji Servisi"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Radyoloji Servisi"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Üroloji Servisi"
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Secretary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Secretary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationRoleClaim", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserClaim", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserLogin", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserRole", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ApplicationUserToken", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Client", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ClientHistory", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.Diseas", "Diseas")
                        .WithMany()
                        .HasForeignKey("DiseasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Polyclinic", "Polyclinic")
                        .WithMany()
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.ClientHistoryMedication", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ClientHistory", "ClientHistory")
                        .WithMany()
                        .HasForeignKey("ClientHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Doctor", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.Polyclinic", "Polyclinic")
                        .WithMany()
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Reservation", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneBilgiSistemi.Data.Model.Polyclinic", "Polyclinic")
                        .WithMany()
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaneBilgiSistemi.Data.Model.Secretary", b =>
                {
                    b.HasOne("HastaneBilgiSistemi.Data.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
